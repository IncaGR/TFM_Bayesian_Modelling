save(commentsTable, file="commentsTable.rda")
}
ui <- fluidPage(
textInput("name", "Enter your name"),
textInput("comment", "Enter your comment"),
actionButton("add", "Add"),
actionButton("remove","Remove"),
tableOutput("comments")
)
server <- function(input, output){
observeEvent(input$add, {
load("commentsTable.rda")
temp <- data.frame(name = input$name,
comment = input$comment)
commentsTable <- rbind(commentsTable, temp)
save(commentsTable, file="commentsTable.rda")
})
observeEvent(input$remove,{
load("commentsTable.rda")
# temp <- data.frame(name = input$name,
#                    comment = input$comment)
if (nrow(commentsTable>0)
commentsTable <- commentsTable[-nrow(commentsTable),]
save(commentsTable, file = "commentsTable.rda")
)
commentsTable <- rbind(commentsTable, temp)
}),
output$comments <- renderTable({
input$add
input$remove
load("commentsTable.rda")
commentsTable
})
}
save(commentsTable, file="commentsTable.rda")
if (!file.exists("commentsTable.rda")){
commentsTable <- data.frame(name=character(),
comments=character())
save(commentsTable, file="commentsTable.rda")
}
ui <- fluidPage(
textInput("name", "Enter your name"),
textInput("comment", "Enter your comment"),
actionButton("add", "Add"),
actionButton("remove","Remove"),
tableOutput("comments")
)
server <- function(input, output){
observeEvent(input$add, {
load("commentsTable.rda")
temp <- data.frame(name = input$name,
comment = input$comment)
commentsTable <- rbind(commentsTable, temp)
save(commentsTable, file="commentsTable.rda")
})
observeEvent(input$remove, {
load("commentsTable.rda")
if (nrow(commentsTable)>0)
commentsTable<- commentsTable[-nrow(commentsTable),]
save(commentsTable, file="commentsTable.rda")
})
output$comments <- renderTable({
input$add
input$remove
load("commentsTable.rda")
commentsTable
})
}
shinyApp(ui, server)
ui<-fluidPage(
plotOutput("plot"),
actionButton("go", "Generate")
)
server<-function(input,output){
rv <- reactiveValues()
rv$numbers <- numeric()
observeEvent(input$go,{
rv$numbers <- c(rv$numbers,rnorm(10))
})
output$plot <- renderPlot({
if (length(rv$numbers)==0) # no data yet
return(invisible(NULL))
hist(rv$numbers, freq=FALSE, xlab="X", ylab="%",main="")
lines(density(rv$numbers))
mtext(paste(length(rv$numbers), "generated data"))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<-fluidPage(
plotOutput("plot"),
actionButton("go", "Generate")
)
server<-function(input,output){
rv <- reactiveValues()
rv$numbers <- numeric()
observeEvent(input$go,{
rv$numbers <- c(rv$numbers,rnorm(10))
})
output$plot <- renderPlot({
if (length(rv$numbers)==0) # no data yet
return(invisible(NULL))
hist(rv$numbers, freq=FALSE, xlab="X", ylab="%",main="")
lines(density(rv$numbers))
mtext(paste(length(rv$numbers), "generated data"))
})
}
shinyApp(ui=ui,server=server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectInput("dataname", "Select data", c("iris","mtcars")),
textInput("varname","Variable name"),
textAreaInput("expr","Expression"),
actionButton("ok","OK")
),
mainPanel(
dataTableOutput("datatable")
)
)
)
server <- function(input, output){
rv <- reactiveValues(data=data.frame)
observeEvent(input$dataname,{
rv$data <- get(input$dataname)
})
observeEvent(input$ok,{
rv$data[,input$varname] <- with(rv$data, eval(parse(text=input$expr)))
})
output$datatable <- renderDataTable(rv$data)
}
shinyApp(ui, server)
install.packages("shinyjs")
library(shinyjs)
ui <- fluidPage(
useShinyjs(), # Set up shinyjs
fluidRow(
column(4,
actionButton("btntoggle", "Hide/Show")
),
column(4,
actionButton("btnshow", "Show")
),
column(4,
actionButton("btnhide", "Hide")
)
),
hidden(
wellPanel(id="elem",
h4("Query form"),
hr(),
textInput("name", "Name", ""),
numericInput("age", "Age", 30),
radioButtons("gender", "Gender",
c("Male", "Female"))
)
)
)
server <- function(input, output) {
observeEvent(input$btntoggle, {
shinyjs::toggle("elem", TRUE, "fade")
})
observeEvent(input$btnshow, {
shinyjs::show("elem", TRUE, "slide")
})
observeEvent(input$btnhide, {
shinyjs::hide("elem", FALSE)
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
radioButtons("what","What do you want to enter?",
c("height/weight"=1, "BMI"=2)),
numericInput("height","Height (cm)",NA),
numericInput("weight","Weight (kg)",NA),
numericInput("bmi","Body mass index",NA)
)
server <- function(input, output, session) {
observe({
if (input$what==1){
shinyjs::disable("bmi", FALSE)
updateNumericInput(session, "bmi",
value=input$weight/(input$height/100)^2)
shinyjs::show("height", FALSE)
shinyjs::show("weight", FALSE)
} else {
shinyjs::enable("bmi", FALSE)
shinyjs::hide("height", FALSE)
shinyjs::hide("weight", FALSE)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
radioButtons("what","What do you want to enter?",
c("height/weight"=1, "BMI"=2)),
numericInput("height","Height (cm)",NA),
numericInput("weight","Weight (kg)",NA),
numericInput("bmi","Body mass index",NA)
)
server <- function(input, output, session) {
observe({
if (input$what==1){
shinyjs::disable("bmi")
updateNumericInput(session, "bmi",
value=input$weight/(input$height/100)^2)
shinyjs::show("height", FALSE)
shinyjs::show("weight", FALSE)
} else {
shinyjs::enable("bmi")
shinyjs::hide("height", FALSE)
shinyjs::hide("weight", FALSE)
updateNumericInput(session, "height", value=NA)
updateNumericInput(session, "weight", value=NA)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
shinyjs::useShinyjs(),
sidebarLayout(
sidebarPanel(id = "side-panel",
numericInput("mynumber", "Enter a number", 20),
textInput("mytext", "Enter a text", "test"),
actionButton("resetbtn", "Reset inputs")
),
mainPanel(
h4("Summary"),
verbatimTextOutput("summary")
)
)
)
server <- function(input, output, session) {
output$summary <- renderText(paste(input$mytext, input$mynumber))
observeEvent(input$resetbtn, shinyjs::reset("side-panel"))
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Set up shinyjs
navbarPage(id="menu", "Menu general",
tabPanel("Table",
tableOutput("table"),
div(id="plot_btn", "Go to 'Plot' tab")
),
tabPanel("Plot",
plotOutput("plot"),
div(id="table_btn", "Go to 'Table' tab")
)
)
)
server <- function(input, output, session){
onclick("table_btn",{
updateNavbarPage(session, "menu", selected="Table")
})
onclick("plot_btn",{
updateNavbarPage(session, "menu", selected="Plot")
})
# clicking on plot, it disappears
onclick("plot", hide("plot"))
output$table <- renderTable(head(iris))
output$plot <- renderPlot(pairs(iris[,-5]))
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),  # Set up shinyjs
navbarPage(id="menu", "Menu general",
tabPanel("Table",
tableOutput("table"),
div(id="plot_btn", "Go to 'Plot' tab")
),
tabPanel("Plot",
plotOutput("plot"),
div(id="table_btn", "Go to 'Table' tab")
)
)
)
server <- function(input, output, session){
onclick("table_btn",{
updateNavbarPage(session, "menu", selected="Table")
})
onclick("plot_btn",{
updateNavbarPage(session, "menu", selected="Plot")
})
# clicking on plot, it disappears
onclick("plot", hide("plot"))
output$table <- renderTable(head(iris))
output$plot <- renderPlot(pairs(iris[,-5]))
}
shinyApp(ui, server)
library(tidyverse)
library(here)
library(car)
getwd()
wd = "C:/Users/ggari/Desktop/Master_MESIO/TFM"
path_functions = here(wd,"srapper","functions_R","clean_data.R")
source(path_functions)
# path_idealista = here(wd,"srapper","data_scrapping","complete_csv_22-03-12.csv")
path_idealista = here(wd,"srapper","extraction_2022-10-21","datos_scrapping_2022-10-21.csv")
path_shp_barcelona = here(wd,"Barrios_de_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
View(data_idealista)
barcelona_shape <- sf::st_read(path_shp_barcelona)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio2)
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio)
barcelona_shape = regex_nom_barris(barcelona_shape,barcelona_shape$NOM)
# changing some names in Idealista data
data_idealista = data_idealista %>%
mutate(key_open = regex_barris,
# shape_nom_barri = ifelse(barrio_lower == "el gòtic","el barri gòtic",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "sant pere - santa caterina i la ribera",
#                          "sant pere - santa caterina i la ribera",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el poble sec - parc de montjuïc",
#                          "el poble-sec", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vila de gràcia", "la vila de gràcia",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "la marina del port", "la marina del port", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vallvidrera - el tibidabo i les planes",
#                          "vallvidrera, el tibidabo i les planes", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el besòs", "el besòs i el maresme", shape_nom_barri),
key_open = ifelse(regex_barris == "besòs", "besòs maresme", key_open),
key_open = ifelse(regex_barris == "can peguera turó peira", "can peguera",
key_open), # recuerda que idealista estan juntos, shp dos barrios distintos
key_open = ifelse(regex_barris == "ciutat meridiana torre baró vallbona",
"ciutat meridiana", key_open),
key_open = ifelse(regex_barris ==  "sant genís agudells montbau",
"montbau", key_open),
key_open = ifelse(regex_barris == "vall hebron clota", "vall hebron", key_open),
key_open = ifelse(regex_barris == "poble sec parc montjuïc", "poble sec", key_open)
)
# to connect Idealista data and shp file the key is: key_shp
data_idealista = data_idealista %>%
mutate(key_shp = regex_barris)
data_idealista = data_idealista %>%
dplyr::rename(nombre = X.U.FEFF.name)
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
data_idealista = data_idealista[data_idealista$price<70000,]
data_idealista = data_idealista[data_idealista$square_mt>10,] # casa con 0 metros, eliminada
## Adding new binary variables
data_idealista = data_idealista %>%
mutate(casa = ifelse(grepl("Casa o chalet",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
mutate(estudio = ifelse(grepl("Estudio",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
dplyr::mutate(wc2 = ifelse(wc >= 3, "3 or more", wc),
wc2 = ifelse(wc == 2, "2", wc2),
wc2 = ifelse(wc == 1, "1", wc2)
)
data_idealista$wc2 <- factor(x = data_idealista$wc2, levels = c("1","2","3 or more"))
ggplot(data_idealista, aes(log(price))) +
geom_histogram(bins = 50)
ggplot(data_idealista, aes(log(square_mt))) +
geom_histogram(bins = 50)
data_idealista = data_idealista%>%
dplyr::mutate(rooms2 = ifelse(rooms >= 4, "4 or more", rooms),
rooms2 = ifelse(rooms == 3, "3", rooms2),
rooms2 = ifelse(rooms == 2, "2", rooms2),
rooms2 = ifelse(rooms  <= 1, "1", rooms2)
)
data_idealista$rooms2 <- factor(x = data_idealista$rooms2, levels = c("1","2","3","4 or more"))
data_idealista$log_price <- log(data_idealista$price)
data_idealista = data_idealista %>%
mutate(terraza_balcon = ifelse((data_idealista$terraza == 1)|(data_idealista$balcon == 1),1,0))
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
ggplot(data_idealista2,aes(square_mt,price)) +
geom_jitter()
data_idealista = data_idealista[data_idealista$price<70000,]
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
library(tidyverse)
library(here)
library(car)
getwd()
wd = "C:/Users/ggari/Desktop/Master_MESIO/TFM"
path_functions = here(wd,"srapper","functions_R","clean_data.R")
source(path_functions)
# path_idealista = here(wd,"srapper","data_scrapping","complete_csv_22-03-12.csv")
path_idealista = here(wd,"srapper","extraction_2022-10-21","datos_scrapping_2022-10-21.csv")
path_shp_barcelona = here(wd,"Barrios_de_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
barcelona_shape <- sf::st_read(path_shp_barcelona)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio)
barcelona_shape = regex_nom_barris(barcelona_shape,barcelona_shape$NOM)
# changing some names in Idealista data
data_idealista = data_idealista %>%
mutate(key_open = regex_barris,
# shape_nom_barri = ifelse(barrio_lower == "el gòtic","el barri gòtic",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "sant pere - santa caterina i la ribera",
#                          "sant pere - santa caterina i la ribera",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el poble sec - parc de montjuïc",
#                          "el poble-sec", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vila de gràcia", "la vila de gràcia",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "la marina del port", "la marina del port", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vallvidrera - el tibidabo i les planes",
#                          "vallvidrera, el tibidabo i les planes", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el besòs", "el besòs i el maresme", shape_nom_barri),
key_open = ifelse(regex_barris == "besòs", "besòs maresme", key_open),
key_open = ifelse(regex_barris == "can peguera turó peira", "can peguera",
key_open), # recuerda que idealista estan juntos, shp dos barrios distintos
key_open = ifelse(regex_barris == "ciutat meridiana torre baró vallbona",
"ciutat meridiana", key_open),
key_open = ifelse(regex_barris ==  "sant genís agudells montbau",
"montbau", key_open),
key_open = ifelse(regex_barris == "vall hebron clota", "vall hebron", key_open),
key_open = ifelse(regex_barris == "poble sec parc montjuïc", "poble sec", key_open)
)
# to connect Idealista data and shp file the key is: key_shp
data_idealista = data_idealista %>%
mutate(key_shp = regex_barris)
data_idealista = data_idealista %>%
dplyr::rename(nombre = X.U.FEFF.name)
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
data_idealista = data_idealista[data_idealista$price<70000,]
data_idealista = data_idealista[data_idealista$square_mt>10,] # casa con 0 metros, eliminada
## Adding new binary variables
data_idealista = data_idealista %>%
mutate(casa = ifelse(grepl("Casa o chalet",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
mutate(estudio = ifelse(grepl("Estudio",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
dplyr::mutate(wc2 = ifelse(wc >= 3, "3 or more", wc),
wc2 = ifelse(wc == 2, "2", wc2),
wc2 = ifelse(wc == 1, "1", wc2)
)
data_idealista$wc2 <- factor(x = data_idealista$wc2, levels = c("1","2","3 or more"))
ggplot(data_idealista, aes(log(price))) +
geom_histogram(bins = 50)
ggplot(data_idealista, aes(log(square_mt))) +
geom_histogram(bins = 50)
data_idealista = data_idealista%>%
dplyr::mutate(rooms2 = ifelse(rooms >= 4, "4 or more", rooms),
rooms2 = ifelse(rooms == 3, "3", rooms2),
rooms2 = ifelse(rooms == 2, "2", rooms2),
rooms2 = ifelse(rooms  <= 1, "1", rooms2)
)
data_idealista$rooms2 <- factor(x = data_idealista$rooms2, levels = c("1","2","3","4 or more"))
data_idealista$log_price <- log(data_idealista$price)
data_idealista = data_idealista %>%
mutate(terraza_balcon = ifelse((data_idealista$terraza == 1)|(data_idealista$balcon == 1),1,0))
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
View(data_idealista)
unique(data_idealista$barrio)
unique(data_idealista$regex_barris)
unique(data_idealista$key_shp)
unique(data_idealista$key_open)
View(data_idealista)
library(rstan)
library(rstanarm)
library(tidyverse)
library(broom)
library(broom.mixed)
library(car)
source('C:/Users/ggari/Desktop/1_projects/TFM/2_code/2_R_code/3_data_modelling.R', echo=TRUE)
getwd()
here::here('..','Desktop')
here::here('Desktop')
library(car)
library(here)
getwd()
here::here()
setwd("C:/Users/ggari/Desktop/1_projects/TFM")
getwd()
here::here()
here::here('..','1_data')
here::here('..','1_data','2_data_Idealista','data_modelling.RDS')
# data_idealista <- readRDS("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling.RDS")
# data_idealista <-
readRDS(here::here('..','1_data','2_data_Idealista','data_modelling.RDS'))
library(here)
here()
setwd("C:/Users/ggari/Desktop/1_projects/TFM")
library(car)
library(here)
here::here('..','1_data','2_data_Idealista','data_modelling.RDS')
getwd()
# data_idealista <- readRDS("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling.RDS")
# data_idealista <-
readRDS(here::here('1_data','2_data_Idealista','data_modelling.RDS'))
# data_idealista <- readRDS("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling.RDS")
# data_idealista <-
readRDS(here::here('1_data','2_data_Idealista','data_modelling.RDS'))
?here
here()
here::here?
()
here::dr_here()
here::i_am('C:\Users\ggari\Desktop\1_projects\TFM')
here::i_am('C:/Users/ggari/Desktop/1_projects/TFM')
here::i_am('../Desktop/1_projects/TFM')
here()
set_here("C:/Users/ggari/Desktop/1_projects/TFM")
here()
library(car)
library(here)
# data_idealista <- readRDS("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling.RDS")
# data_idealista <-
readRDS(here::here('1_data','2_data_Idealista','data_modelling.RDS'))
here()
here::dr_here()

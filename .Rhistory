c("height/weight"=1, "BMI"=2)),
numericInput("height","Height (cm)",NA),
numericInput("weight","Weight (kg)",NA),
numericInput("bmi","Body mass index",NA)
)
server <- function(input, output, session) {
observe({
if (input$what==1){
shinyjs::disable("bmi", FALSE)
updateNumericInput(session, "bmi",
value=input$weight/(input$height/100)^2)
shinyjs::show("height", FALSE)
shinyjs::show("weight", FALSE)
} else {
shinyjs::enable("bmi", FALSE)
shinyjs::hide("height", FALSE)
shinyjs::hide("weight", FALSE)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
radioButtons("what","What do you want to enter?",
c("height/weight"=1, "BMI"=2)),
numericInput("height","Height (cm)",NA),
numericInput("weight","Weight (kg)",NA),
numericInput("bmi","Body mass index",NA)
)
server <- function(input, output, session) {
observe({
if (input$what==1){
shinyjs::disable("bmi")
updateNumericInput(session, "bmi",
value=input$weight/(input$height/100)^2)
shinyjs::show("height", FALSE)
shinyjs::show("weight", FALSE)
} else {
shinyjs::enable("bmi")
shinyjs::hide("height", FALSE)
shinyjs::hide("weight", FALSE)
updateNumericInput(session, "height", value=NA)
updateNumericInput(session, "weight", value=NA)
}
})
}
shinyApp(ui, server)
ui <- fluidPage(
shinyjs::useShinyjs(),
sidebarLayout(
sidebarPanel(id = "side-panel",
numericInput("mynumber", "Enter a number", 20),
textInput("mytext", "Enter a text", "test"),
actionButton("resetbtn", "Reset inputs")
),
mainPanel(
h4("Summary"),
verbatimTextOutput("summary")
)
)
)
server <- function(input, output, session) {
output$summary <- renderText(paste(input$mytext, input$mynumber))
observeEvent(input$resetbtn, shinyjs::reset("side-panel"))
}
shinyApp(ui, server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Set up shinyjs
navbarPage(id="menu", "Menu general",
tabPanel("Table",
tableOutput("table"),
div(id="plot_btn", "Go to 'Plot' tab")
),
tabPanel("Plot",
plotOutput("plot"),
div(id="table_btn", "Go to 'Table' tab")
)
)
)
server <- function(input, output, session){
onclick("table_btn",{
updateNavbarPage(session, "menu", selected="Table")
})
onclick("plot_btn",{
updateNavbarPage(session, "menu", selected="Plot")
})
# clicking on plot, it disappears
onclick("plot", hide("plot"))
output$table <- renderTable(head(iris))
output$plot <- renderPlot(pairs(iris[,-5]))
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),  # Set up shinyjs
navbarPage(id="menu", "Menu general",
tabPanel("Table",
tableOutput("table"),
div(id="plot_btn", "Go to 'Plot' tab")
),
tabPanel("Plot",
plotOutput("plot"),
div(id="table_btn", "Go to 'Table' tab")
)
)
)
server <- function(input, output, session){
onclick("table_btn",{
updateNavbarPage(session, "menu", selected="Table")
})
onclick("plot_btn",{
updateNavbarPage(session, "menu", selected="Plot")
})
# clicking on plot, it disappears
onclick("plot", hide("plot"))
output$table <- renderTable(head(iris))
output$plot <- renderPlot(pairs(iris[,-5]))
}
shinyApp(ui, server)
library(tidyverse)
library(here)
library(car)
getwd()
wd = "C:/Users/ggari/Desktop/Master_MESIO/TFM"
path_functions = here(wd,"srapper","functions_R","clean_data.R")
source(path_functions)
# path_idealista = here(wd,"srapper","data_scrapping","complete_csv_22-03-12.csv")
path_idealista = here(wd,"srapper","extraction_2022-10-21","datos_scrapping_2022-10-21.csv")
path_shp_barcelona = here(wd,"Barrios_de_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
View(data_idealista)
barcelona_shape <- sf::st_read(path_shp_barcelona)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio2)
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio)
barcelona_shape = regex_nom_barris(barcelona_shape,barcelona_shape$NOM)
# changing some names in Idealista data
data_idealista = data_idealista %>%
mutate(key_open = regex_barris,
# shape_nom_barri = ifelse(barrio_lower == "el gòtic","el barri gòtic",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "sant pere - santa caterina i la ribera",
#                          "sant pere - santa caterina i la ribera",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el poble sec - parc de montjuïc",
#                          "el poble-sec", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vila de gràcia", "la vila de gràcia",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "la marina del port", "la marina del port", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vallvidrera - el tibidabo i les planes",
#                          "vallvidrera, el tibidabo i les planes", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el besòs", "el besòs i el maresme", shape_nom_barri),
key_open = ifelse(regex_barris == "besòs", "besòs maresme", key_open),
key_open = ifelse(regex_barris == "can peguera turó peira", "can peguera",
key_open), # recuerda que idealista estan juntos, shp dos barrios distintos
key_open = ifelse(regex_barris == "ciutat meridiana torre baró vallbona",
"ciutat meridiana", key_open),
key_open = ifelse(regex_barris ==  "sant genís agudells montbau",
"montbau", key_open),
key_open = ifelse(regex_barris == "vall hebron clota", "vall hebron", key_open),
key_open = ifelse(regex_barris == "poble sec parc montjuïc", "poble sec", key_open)
)
# to connect Idealista data and shp file the key is: key_shp
data_idealista = data_idealista %>%
mutate(key_shp = regex_barris)
data_idealista = data_idealista %>%
dplyr::rename(nombre = X.U.FEFF.name)
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
data_idealista = data_idealista[data_idealista$price<70000,]
data_idealista = data_idealista[data_idealista$square_mt>10,] # casa con 0 metros, eliminada
## Adding new binary variables
data_idealista = data_idealista %>%
mutate(casa = ifelse(grepl("Casa o chalet",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
mutate(estudio = ifelse(grepl("Estudio",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
dplyr::mutate(wc2 = ifelse(wc >= 3, "3 or more", wc),
wc2 = ifelse(wc == 2, "2", wc2),
wc2 = ifelse(wc == 1, "1", wc2)
)
data_idealista$wc2 <- factor(x = data_idealista$wc2, levels = c("1","2","3 or more"))
ggplot(data_idealista, aes(log(price))) +
geom_histogram(bins = 50)
ggplot(data_idealista, aes(log(square_mt))) +
geom_histogram(bins = 50)
data_idealista = data_idealista%>%
dplyr::mutate(rooms2 = ifelse(rooms >= 4, "4 or more", rooms),
rooms2 = ifelse(rooms == 3, "3", rooms2),
rooms2 = ifelse(rooms == 2, "2", rooms2),
rooms2 = ifelse(rooms  <= 1, "1", rooms2)
)
data_idealista$rooms2 <- factor(x = data_idealista$rooms2, levels = c("1","2","3","4 or more"))
data_idealista$log_price <- log(data_idealista$price)
data_idealista = data_idealista %>%
mutate(terraza_balcon = ifelse((data_idealista$terraza == 1)|(data_idealista$balcon == 1),1,0))
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
ggplot(data_idealista2,aes(square_mt,price)) +
geom_jitter()
data_idealista = data_idealista[data_idealista$price<70000,]
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
library(tidyverse)
library(here)
library(car)
getwd()
wd = "C:/Users/ggari/Desktop/Master_MESIO/TFM"
path_functions = here(wd,"srapper","functions_R","clean_data.R")
source(path_functions)
# path_idealista = here(wd,"srapper","data_scrapping","complete_csv_22-03-12.csv")
path_idealista = here(wd,"srapper","extraction_2022-10-21","datos_scrapping_2022-10-21.csv")
path_shp_barcelona = here(wd,"Barrios_de_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
barcelona_shape <- sf::st_read(path_shp_barcelona)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio)
barcelona_shape = regex_nom_barris(barcelona_shape,barcelona_shape$NOM)
# changing some names in Idealista data
data_idealista = data_idealista %>%
mutate(key_open = regex_barris,
# shape_nom_barri = ifelse(barrio_lower == "el gòtic","el barri gòtic",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "sant pere - santa caterina i la ribera",
#                          "sant pere - santa caterina i la ribera",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el poble sec - parc de montjuïc",
#                          "el poble-sec", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vila de gràcia", "la vila de gràcia",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "la marina del port", "la marina del port", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vallvidrera - el tibidabo i les planes",
#                          "vallvidrera, el tibidabo i les planes", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el besòs", "el besòs i el maresme", shape_nom_barri),
key_open = ifelse(regex_barris == "besòs", "besòs maresme", key_open),
key_open = ifelse(regex_barris == "can peguera turó peira", "can peguera",
key_open), # recuerda que idealista estan juntos, shp dos barrios distintos
key_open = ifelse(regex_barris == "ciutat meridiana torre baró vallbona",
"ciutat meridiana", key_open),
key_open = ifelse(regex_barris ==  "sant genís agudells montbau",
"montbau", key_open),
key_open = ifelse(regex_barris == "vall hebron clota", "vall hebron", key_open),
key_open = ifelse(regex_barris == "poble sec parc montjuïc", "poble sec", key_open)
)
# to connect Idealista data and shp file the key is: key_shp
data_idealista = data_idealista %>%
mutate(key_shp = regex_barris)
data_idealista = data_idealista %>%
dplyr::rename(nombre = X.U.FEFF.name)
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
data_idealista = data_idealista[data_idealista$price<70000,]
data_idealista = data_idealista[data_idealista$square_mt>10,] # casa con 0 metros, eliminada
## Adding new binary variables
data_idealista = data_idealista %>%
mutate(casa = ifelse(grepl("Casa o chalet",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
mutate(estudio = ifelse(grepl("Estudio",data_idealista$nombre)==TRUE,1,0))
data_idealista = data_idealista %>%
dplyr::mutate(wc2 = ifelse(wc >= 3, "3 or more", wc),
wc2 = ifelse(wc == 2, "2", wc2),
wc2 = ifelse(wc == 1, "1", wc2)
)
data_idealista$wc2 <- factor(x = data_idealista$wc2, levels = c("1","2","3 or more"))
ggplot(data_idealista, aes(log(price))) +
geom_histogram(bins = 50)
ggplot(data_idealista, aes(log(square_mt))) +
geom_histogram(bins = 50)
data_idealista = data_idealista%>%
dplyr::mutate(rooms2 = ifelse(rooms >= 4, "4 or more", rooms),
rooms2 = ifelse(rooms == 3, "3", rooms2),
rooms2 = ifelse(rooms == 2, "2", rooms2),
rooms2 = ifelse(rooms  <= 1, "1", rooms2)
)
data_idealista$rooms2 <- factor(x = data_idealista$rooms2, levels = c("1","2","3","4 or more"))
data_idealista$log_price <- log(data_idealista$price)
data_idealista = data_idealista %>%
mutate(terraza_balcon = ifelse((data_idealista$terraza == 1)|(data_idealista$balcon == 1),1,0))
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
View(data_idealista)
unique(data_idealista$barrio)
unique(data_idealista$regex_barris)
unique(data_idealista$key_shp)
unique(data_idealista$key_open)
View(data_idealista)
data_idealista <- readRDS("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling.RDS")
data_idealista <- readRDS("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling.RDS")
# bar de copas
colnames(data_idealista)
# bar de copas
colnames(data_idealista)
regressors<-c(
# "barri",
"distrito2",
"terraza",
# "balcon",
"estado" ,
# "armarios",
# "cocina",
"amueblado",
# "planta",
# "calef",
"asc",
"aire",
"exterior",
# "casa",
"estudio",
"wc2",
"rooms2",
# # "terraza_balcon",
# "n_hospitals_barri",
# # "n_hospitals_districte",
# "hospitals",
# "caps",
"cuaps",
"n_terrazas_barri",
# # "n_terrazas_districte",
# # "mean_cadires_b",
"mean_superficie_b",
"mean_taules_b",
# "n_arbres_bcn_barri",
# # "n_arbres_bcn_districte",
"n_arbres_viaris_barri",
# # "n_arbres_viaris_districte",
"n_bar_copas_barri",
# # "n_bar_copas_districte",
"square_mt"
)
lm0 <- lm(reformulate("square_mt","log_price"),
data_idealista)
lm1 <- lm(reformulate(regressors,"log_price"),
data_idealista)
summary(lm0)
summary(lm1)
summary(lm1)
lm1 <- lm(reformulate("square_mt + rooms2","log_price"),
data_idealista)
lm2 <- lm(reformulate(regressors,"log_price"),
data_idealista)
summary(lm0)
summary(lm1)
summary(lm0)
summary(lm1)
summary(lm2)
vif(lm2)
library(car)
vif(lm2)
plot(lm2,ask=F)
data_idealista[which(hatvalues(lm1)>0.99),]
data_idealista[which(hatvalues(lm2)>0.99),]
# sort(cooks.distance(lm1))
cooksd =  cooks.distance(lm2)
data_idealista$cookd = cooks.distance(lm2)
data_idealista[data_idealista$cookd>0.01,]
dim(data_idealista[data_idealista$cookd>0.01,])
plot(cooks.distance(lm2))
abline(h = 4*mean(cooksd, na.rm=T), col="red")
# cook_test = data_idealista[data_idealista$cookd >(4*mean(cooksd, na.rm=T)),]
data_cook = data_idealista[data_idealista$cookd < 0.01,]
lm3 <- lm(reformulate(regressors,"log_price"),
data_cook)
summary(lm3)
vif(lm3)
plot(lm3,ask=F)
library(tidyverse)
library(here)
library(car)
getwd()
wd = "C:/Users/ggari/Desktop/1_projects/TFM"
setwd(wd)
path_functions = here(wd,"2_code","2_R_code","functions","data_mapping.R")
source(path_functions)
table_districte = data.frame(codi_districte = c(1:10),
distrito2= c("Distrito Ciutat Vella",
"Distrito Eixample",
"Distrito Sants-Montjuïc",
"Distrito Les Corts",
"Distrito Sarrià-Sant Gervasi",
"Distrito Gràcia",
"Distrito Horta Guinardó",
"Distrito Nou Barris",
"Distrito Sant Andreu",
"Distrito Sant Martí"))
# Reading data ------------------------------------------------------------
path_data_Ide = "1_data/2_data_Idealista"
path_idealista = here(wd,path_data_Ide,"2_clean","idealista_data_clean_2.csv")
path_shp_barcelona = here(wd,"1_data","3_data_Barris_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
barcelona_shape <- sf::st_read(path_shp_barcelona)
mapping = mapIdBarri(barcelona_shape)
mapping = regex_nom_barris(mapping,mapping$barri)
unique(data_idealista$key_shp)
unique(data_idealista$key_open)
unique(data_idealista$key_shp)
unique(data_idealista$key_open)
# mapping by id because mapping by names cause errors, different names.. etc
data_idealista = left_join(data_idealista,mapping, by=c("key_open" ="regex_barris"))
data_idealista = left_join(data_idealista,table_districte, by="distrito2")
summary(data_idealista)
# filtering data if the id is not present:
# sometime the scrapper return data from outside of Barcelona
data_idealista = data_idealista %>% dplyr::filter(!is.na(codi_districte))
data_idealista$id_barri <- as.numeric(data_idealista$id_barri)
summary(data_idealista)
unique((data_idealista %>% dplyr::filter(is.na(id_barri)))$regex_barri)
data_idealista = data_idealista %>% dplyr::filter(!is.na(id_barri))
summary(data_idealista)
ggplot(data_idealista,aes(square_mt,price, col = distrito2)) +
geom_jitter()
path_open_data <- "1_data/1_data_API/dataset_opendata"
files <- list.files(here(wd,path_open_data))
read_API_data()
colnames(data_idealista)
data_idealista = groupingDataOpenData(data_idealista,hospitales,"hospitals")
colnames(data_idealista)
hospitales = hospitales %>%
dplyr::filter(secondary_filters_name %in% c("Hospitals i clíniques","CAPs","Centres urgències (CUAPs)"))
print(hospitales)
print(n_hospital_barri)
n_hospital_barri = hospitales %>%
group_by(addresses_neighborhood_id,addresses_neighborhood_name,secondary_filters_name) %>%
count(name = "counts",sort = T)
print(n_hospital_barri)
wider_type = n_hospital_barri %>%
pivot_wider(names_from = secondary_filters_name,values_from = counts,values_fill = 0)
wider_type = wider_type %>%
rename(hospitals = "Hospitals i clíniques",
caps = "CAPs"  ,
cuaps = "Centres urgències (CUAPs)")
print(wider_type)
# data_idealista$id_barri = as.integer(data_idealista$id_barri)
#
data_idealista = left_join(data_idealista,wider_type,by=c("id_barri" = "addresses_neighborhood_id"))
summary(data_idealista)
dim(data_idealista)
data_idealista %>% dplyr::filter(!is.na(caps))
data_idealista %>% dplyr::filter(is.na(caps))
data_idealista %>% dplyr::filter(is.na(caps))
data_idealista %>% dplyr::filter(is.na(caps))$barri
data_idealista %>% dplyr::filter(is.na(caps)) %>% select(barri)
data_idealista %>% dplyr::filter(is.na(caps)) %>% select(barri) %>% unique()
wider_type
wider_type %>% select(addresses_neighborhood_name) %>% unique()
t = data_idealista %>% dplyr::filter(is.na(caps)) %>% select(barri) %>% unique()
t2 = wider_type %>% select(addresses_neighborhood_name) %>% unique()
View(t)
View(t2)
setdiff()
?setdiff
data_idealista %>% dplyr::filter(is.na(caps)) %>% select(barri) %>% unique()
summary(data_idealista)
dim(data_idealista)
# There are 365 NA's when merging the hospital data with the Idealista dataset
# let's see if that is because there are no equipment in zone neighbourhoods
# or there are an error doing the maapping
summary(data_idealista)
data_idealista %>% dplyr::filter(is.na(caps)) %>% select(barri) %>% unique()
colnames(data_idealista)
data_idealista %>% dplyr::filter(is.na(caps)) %>% select(id_barri) %>% unique()
colnames(wider_type)
data_idealista %>% dplyr::filter(is.na(caps)) %>% select(id_barri) %>% unique()
wider_type %>% select(addresses_neighborhood_id) %>% unique()
list_hospitals = wider_type %>% select(addresses_neighborhood_id) %>% unique()
list_idealista = data_idealista %>% dplyr::filter(is.na(caps)) %>% select(id_barri) %>% unique()
setdiff(list_idealista,list_hospitals)
setdiff(list_idealista,list_hospitals$addresses_neighborhood_id)
setdiff(1:5, 4:8)
setdiff(list_idealista,list_hospitals$addresses_neighborhood_id)
wider_type %>% select(addresses_neighborhood_id) %>%
setdiff(list_idealista,list_hospitals$addresses_neighborhood_id)
wider_type %>% select(addresses_neighborhood_id) %>% ungroup()
wider_type  %>%  ungroup() %>% select(addresses_neighborhood_id)
list_hospital = wider_type %>% ungroup() %>% select(addresses_neighborhood_id)
setdiff(list_idealista,list_hospital)
list_idealista
list_idealista = data_idealista %>% dplyr::filter(is.na(caps)) %>% select(id_barri) %>% unique() %>% array()
list_idealista
list_hospital = wider_type %>% ungroup() %>% select(addresses_neighborhood_id) %>%
array()
setdiff(list_idealista,list_hospital)
list_idealista = data_idealista %>% dplyr::filter(is.na(caps)) %>% select(id_barri) %>% unique() %>% array()
list_hospital = wider_type %>% ungroup() %>% select(addresses_neighborhood_id) %>%
array()
setdiff(list_idealista,list_hospital)
base::setdiff(list_idealista,list_hospital)
base::setdiff(list_hospital,list_idealista)
base::setdiff(list_idealista,list_hospital)
list_idealista
base::setdiff(list_idealista,list_hospital)
diff = base::setdiff(list_idealista,list_hospital)
list_idealista == diff
diff
list_idealista
length(list_idealista) == length(diff)
diff = base::setdiff(list_idealista,list_hospital)
if(length(list_idealista) == length(diff)) {
print("the NA's are correct as those id neigbourhoods have not equipment")
}
print("there are error review the data")
diff = base::setdiff(list_idealista,list_hospital)
if(length(list_idealista) == length(diff)) {
print("the NA's are correct as those id neigbourhoods have not equipment")
} else{
print("there are error review the data")
}
colnames(terrazas2)
head(terrazas2)
data_idealista = groupingDataOpenData(data_idealista,terrazas2,"terrazas")
groupingDataOpenData(data_idealista,terrazas2,"terrazas")
summary(data_idealista)
unique(data_idealista[is.na(data_idealista$n_terrazas_barri),]$barri)

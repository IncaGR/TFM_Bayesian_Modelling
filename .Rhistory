barcelona_shape <- sf::st_read(path_shp_barcelona)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
library(tidyverse)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
library(dplyr)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio2)
barcelona_shape = regex_nom_barris(barcelona_shape,barcelona_shape$NOM)
# changing some names in Idealista data
data_idealista = data_idealista %>%
mutate(key_open = regex_barris,
# shape_nom_barri = ifelse(barrio_lower == "el gòtic","el barri gòtic",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "sant pere - santa caterina i la ribera",
#                          "sant pere - santa caterina i la ribera",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el poble sec - parc de montjuïc",
#                          "el poble-sec", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vila de gràcia", "la vila de gràcia",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "la marina del port", "la marina del port", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vallvidrera - el tibidabo i les planes",
#                          "vallvidrera, el tibidabo i les planes", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el besòs", "el besòs i el maresme", shape_nom_barri),
key_open = ifelse(regex_barris == "besòs", "besòs maresme", key_open),
key_open = ifelse(regex_barris == "can peguera turó peira", "can peguera",
key_open), # recuerda que idealista estan juntos, shp dos barrios distintos
key_open = ifelse(regex_barris == "ciutat meridiana torre baró vallbona",
"ciutat meridiana", key_open),
key_open = ifelse(regex_barris ==  "sant genís agudells montbau",
"montbau", key_open),
key_open = ifelse(regex_barris == "vall hebron clota", "vall hebron", key_open),
key_open = ifelse(regex_barris == "poble sec parc montjuïc", "poble sec", key_open)
)
# to connect Idealista data and shp file the key is: key_shp
data_idealista = data_idealista %>%
mutate(key_shp = regex_barris)
data_idealista = data_idealista %>%
dplyr::rename(id = X.U.FEFF.id)
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
# data_idealista = data_idealista[data_idealista$price<70000,]
# data_idealista = data_idealista[data_idealista$price<10000,] # testing
data_idealista = data_idealista[data_idealista$price<7500,] # testing
data_idealista = data_idealista[data_idealista$square_mt>10,] # casa con 0 metros, eliminada
data_idealista = data_idealista[data_idealista$square_mt<375,]
View(data_idealista)
## Adding new binary variables
data_idealista = data_idealista %>%
mutate(casa = ifelse(grepl("Casa o chalet",data_idealista$name)==TRUE,1,0))
data_idealista = data_idealista %>%
mutate(estudio = ifelse(grepl("Estudio",data_idealista$name)==TRUE,1,0))
data_idealista = data_idealista %>%
dplyr::mutate(wc2 = ifelse(wc >= 3, "3 or more", wc),
wc2 = ifelse(wc == 2, "2", wc2),
wc2 = ifelse(wc == 1, "1", wc2)
)
data_idealista$wc2 <- factor(x = data_idealista$wc2, levels = c("1","2","3 or more"))
ggplot(data_idealista, aes(log(price))) +
geom_histogram(bins = 50)
ggplot(data_idealista, aes(log(square_mt))) +
geom_histogram(bins = 50)
data_idealista = data_idealista%>%
dplyr::mutate(rooms2 = ifelse(rooms >= 4, "4 or more", rooms),
rooms2 = ifelse(rooms == 3, "3", rooms2),
rooms2 = ifelse(rooms == 2, "2", rooms2),
rooms2 = ifelse(rooms  <= 1, "1", rooms2)
)
data_idealista$rooms2 <- factor(x = data_idealista$rooms2, levels = c("1","2","3","4 or more"))
data_idealista$log_price <- log(data_idealista$price)
data_idealista = data_idealista %>%
mutate(terraza_balcon = ifelse((data_idealista$terraza == 1)|(data_idealista$balcon == 1),1,0))
ggplot(data_idealista,aes(square_mt,price, col = distrito2)) +
geom_jitter()
source("C:/Users/ggari/Desktop/1_projects/TFM/2_code/2_R_code/1_data_cleaning.R", encoding = 'UTF-8', echo=TRUE)
today
library(lubridate)
today()
path_idealista
library(stringr)
install.packages("glue")
install.packages("glue")
install.packages("glue")
install.packages("glue")
date_of_data = "2023-04-20"
paste("extraction",date_of_data)
paste("extraction",date_of_data, sep = "_")
paste0("datos_scrapping_",date_of_data,".csv")
library(tidyverse)
library(here)
install.packages("glue")
install.packages("glue")
install.packages("glue")
remove.packages("glue")
install.packages("glue")
install.packages("glue")
library(tidyverse)
library(here)
library(car)
# library(dplyr)
library(lubridate)
getwd()
date_of_data = "2023-04-20"
path_idealista_folder = paste("extraction",date_of_data, sep = "_")
path_idealista_csv = paste0("datos_scrapping_",date_of_data,".csv")
wd = "C:/Users/ggari/Desktop/1_projects/TFM"
path_functions = here(wd,"2_code","2_R_code","functions","data_mapping.R")
source(path_functions)
# Reading data ------------------------------------------------------------
path_data_Ide = "1_data/2_data_Idealista"
# path_idealista = here(wd, path_data_Ide,"1_raw","extraction_2022-11-01","datos_scrapping_2022-11-01.csv")
# path_idealista = here(wd,path_data_Ide,"1_raw","extraction_2022-11-17","datos_scrapping_2022-11-19.csv")
path_idealista = here(wd,path_data_Ide,"1_raw",path_idealista_folder,path_idealista_csv)
path_shp_barcelona = here(wd,"1_data","3_data_Barris_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
barcelona_shape <- sf::st_read(path_shp_barcelona)
data_idealista = data_idealista %>%
dplyr::filter(!distrito2 %in% c("Teatinos","Playa de Palma","La Torrasa","Santa Eulàlia"))
# applying the normalization names function
data_idealista = regex_nom_barris(data_idealista,data_idealista$barrio2)
barcelona_shape = regex_nom_barris(barcelona_shape,barcelona_shape$NOM)
# changing some names in Idealista data
data_idealista = data_idealista %>%
mutate(key_open = regex_barris,
# shape_nom_barri = ifelse(barrio_lower == "el gòtic","el barri gòtic",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "sant pere - santa caterina i la ribera",
#                          "sant pere - santa caterina i la ribera",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el poble sec - parc de montjuïc",
#                          "el poble-sec", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vila de gràcia", "la vila de gràcia",shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "la marina del port", "la marina del port", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "vallvidrera - el tibidabo i les planes",
#                          "vallvidrera, el tibidabo i les planes", shape_nom_barri),
# shape_nom_barri = ifelse(barrio_lower == "el besòs", "el besòs i el maresme", shape_nom_barri),
key_open = ifelse(regex_barris == "besòs", "besòs maresme", key_open),
key_open = ifelse(regex_barris == "can peguera turó peira", "can peguera",
key_open), # recuerda que idealista estan juntos, shp dos barrios distintos
key_open = ifelse(regex_barris == "ciutat meridiana torre baró vallbona",
"ciutat meridiana", key_open),
key_open = ifelse(regex_barris ==  "sant genís agudells montbau",
"montbau", key_open),
key_open = ifelse(regex_barris == "vall hebron clota", "vall hebron", key_open),
key_open = ifelse(regex_barris == "poble sec parc montjuïc", "poble sec", key_open)
)
# to connect Idealista data and shp file the key is: key_shp
data_idealista = data_idealista %>%
mutate(key_shp = regex_barris)
data_idealista = data_idealista %>%
dplyr::rename(id = X.U.FEFF.id)
ggplot(data_idealista,aes(square_mt,price)) +
geom_jitter()
# data_idealista = data_idealista[data_idealista$price<70000,]
# data_idealista = data_idealista[data_idealista$price<10000,] # testing
data_idealista = data_idealista[data_idealista$price<7500,] # testing
data_idealista = data_idealista[data_idealista$square_mt>10,] # casa con 0 metros, eliminada
data_idealista = data_idealista[data_idealista$square_mt<375,]
## Adding new binary variables
data_idealista = data_idealista %>%
mutate(casa = ifelse(grepl("Casa o chalet",data_idealista$name)==TRUE,1,0))
data_idealista = data_idealista %>%
mutate(estudio = ifelse(grepl("Estudio",data_idealista$name)==TRUE,1,0))
data_idealista = data_idealista %>%
dplyr::mutate(wc2 = ifelse(wc >= 3, "3 or more", wc),
wc2 = ifelse(wc == 2, "2", wc2),
wc2 = ifelse(wc == 1, "1", wc2)
)
data_idealista$wc2 <- factor(x = data_idealista$wc2, levels = c("1","2","3 or more"))
ggplot(data_idealista, aes(log(price))) +
geom_histogram(bins = 50)
ggplot(data_idealista, aes(log(square_mt))) +
geom_histogram(bins = 50)
data_idealista = data_idealista%>%
dplyr::mutate(rooms2 = ifelse(rooms >= 4, "4 or more", rooms),
rooms2 = ifelse(rooms == 3, "3", rooms2),
rooms2 = ifelse(rooms == 2, "2", rooms2),
rooms2 = ifelse(rooms  <= 1, "1", rooms2)
)
data_idealista$rooms2 <- factor(x = data_idealista$rooms2, levels = c("1","2","3","4 or more"))
data_idealista$log_price <- log(data_idealista$price)
data_idealista = data_idealista %>%
mutate(terraza_balcon = ifelse((data_idealista$terraza == 1)|(data_idealista$balcon == 1),1,0))
ggplot(data_idealista,aes(square_mt,price, col = distrito2)) +
geom_jitter()
day = today()
day
path_idealista
str_extract(path_idealista, "\\d{4}-\\d{2}-\\d{2}")
date <- str_extract(path_idealista, "\\d{4}-\\d{2}-\\d{2}")
paste0("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/2_clean/data_idealista_clean_",date,".csv")
date_to_save <- str_extract(path_idealista, "\\d{4}-\\d{2}-\\d{2}")
path_to_save = paste0("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/2_clean/data_idealista_clean_",date,".csv")
path_to_save
write.csv(data_idealista,path_to_save,
fileEncoding = "UTF-8")
print(paste0("Succesfully saved: ",path_to_save))
date_to_save
source("C:/Users/ggari/Desktop/1_projects/TFM/2_code/2_R_code/2_data_aggregations.R", encoding = 'UTF-8', echo=TRUE)
paste0("idealista_data_clean_",date_of_data,".csv")
library(tidyverse)
library(here)
library(car)
getwd()
date_of_data = "2023-04-20" # put the date of the file you want to aggregate
wd = "C:/Users/ggari/Desktop/1_projects/TFM"
setwd(wd)
date_of_data = "2023-04-20" # put the date of the file you want to clean
path_functions = here(wd,"2_code","2_R_code","functions","data_mapping.R")
source(path_functions)
table_districte = data.frame(codi_districte = c(1:10),
distrito2= c("Distrito Ciutat Vella",
"Distrito Eixample",
"Distrito Sants-Montjuïc",
"Distrito Les Corts",
"Distrito Sarrià-Sant Gervasi",
"Distrito Gràcia",
"Distrito Horta Guinardó",
"Distrito Nou Barris",
"Distrito Sant Andreu",
"Distrito Sant Martí"))
# Reading data ------------------------------------------------------------
path_data_Ide = "1_data/2_data_Idealista"
path_csv_clean = paste0("idealista_data_clean_",date_of_data,".csv")
path_idealista = here(wd,path_data_Ide,"2_clean",path_csv_clean)
path_shp_barcelona = here(wd,"1_data","3_data_Barris_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
C:\Users\ggari\Desktop\1_projects\TFM\1_data\2_data_Idealista\2_clean
path_csv_clean = paste0("data_idealista_clean_",date_of_data,".csv")
path_idealista = here(wd,path_data_Ide,"2_clean",path_csv_clean)
path_shp_barcelona = here(wd,"1_data","3_data_Barris_Barcelona","0301040100_Barris_ADM_ETRS89.shp")
data_idealista = read.csv(path_idealista,encoding = "UTF-8")
barcelona_shape <- sf::st_read(path_shp_barcelona)
mapping = mapIdBarri(barcelona_shape)
mapping = regex_nom_barris(mapping,mapping$barri)
unique(data_idealista$key_shp)
unique(data_idealista$key_open)
# mapping by id because mapping by names cause errors, different names.. etc
data_idealista = left_join(data_idealista,mapping, by=c("key_open" ="regex_barris"))
data_idealista = left_join(data_idealista,table_districte, by="distrito2")
summary(data_idealista)
# filtering data if the id is not present:
# sometime the scrapper return data from outside of Barcelona
data_idealista = data_idealista %>% dplyr::filter(!is.na(codi_districte))
data_idealista$id_barri <- as.numeric(data_idealista$id_barri)
summary(data_idealista)
unique((data_idealista %>% dplyr::filter(is.na(id_barri)))$regex_barri)
data_idealista = data_idealista %>% dplyr::filter(!is.na(id_barri))
summary(data_idealista)
ggplot(data_idealista,aes(square_mt,price, col = distrito2)) +
geom_jitter()
path_open_data <- "1_data/1_data_API/dataset_opendata"
files <- list.files(here(wd,path_open_data))
read_API_data()
data_idealista = groupingDataOpenData(data_idealista,hospitales,"hospitals")
hospitales = hospitales %>%
dplyr::filter(secondary_filters_name %in% c("Hospitals i clíniques","CAPs","Centres urgències (CUAPs)"))
n_hospital_barri = hospitales %>%
group_by(addresses_neighborhood_id,addresses_neighborhood_name,secondary_filters_name) %>%
count(name = "counts",sort = T)
print(n_hospital_barri)
wider_type = n_hospital_barri %>%
pivot_wider(names_from = secondary_filters_name,values_from = counts,values_fill = 0)
wider_type = wider_type %>%
rename(hospitals = "Hospitals i clíniques",
caps = "CAPs"  ,
cuaps = "Centres urgències (CUAPs)")
print(wider_type)
# data_idealista$id_barri = as.integer(data_idealista$id_barri)
#
data_idealista = left_join(data_idealista,wider_type,by=c("id_barri" = "addresses_neighborhood_id"))
# There are 365 NA's when merging the hospital data with the Idealista dataset
# let's see if that is because there are no equipment in zone neighbourhoods
# or there are an error doing the maapping
summary(data_idealista)
dim(data_idealista)
# to check the difference of length between the Idealista missing data for hospitals
# and the id from hospitals data that have not equipment
list_idealista = data_idealista %>% dplyr::filter(is.na(caps)) %>% select(id_barri) %>% unique() %>% array()
list_hospital = wider_type %>% ungroup() %>% select(addresses_neighborhood_id) %>%
array()
diff = base::setdiff(list_idealista,list_hospital)
if(length(list_idealista) == length(diff)) {
print("The NA's are correct as those id neigbourhoods have not
equipment for hospitals data.")
} else{
print("There are errors. Review the data.")
}
diff
list_idealista
list_hospital
wider_type
summary(data_idealista)
data_idealista %>% filter(is.na(caps))
data_idealista %>% filter(is.na(caps)) %>% pull(barri) %>% unique()
wider_type %>% ungroup() %>% pull(addresses_neighborhood_id)
list_hospital = wider_type %>% ungroup() %>% pull(addresses_neighborhood_id)
list_idealista = data_idealista %>% dplyr::filter(is.na(caps)) %>% pull(id_barri) %>% unique()
list_idealista
diff = base::setdiff(list_idealista,list_hospital)
diff
if(length(list_idealista) == length(diff)) {
print("The NA's are correct as those id neigbourhoods have not
equipment for hospitals data.")
} else{
print("There are errors. Review the data.")
}
list_idealista
list_hospital
list_idealista %in% list_hospital
diff
colnames(terrazas2)
head(terrazas2)
data_idealista = groupingDataOpenData(data_idealista,terrazas2,"terrazas")
groupingDataOpenData(data_idealista,terrazas2,"terrazas")
summary(data_idealista)
unique(data_idealista[is.na(data_idealista$n_terrazas_barri),]$barri)
rev = terrazas2%>%
group_by(nom_barri,codi_barri)%>%
summarise(mean_cadires_b = mean(cadires),mean_superficie_b=mean(superficie_ocupada),
mean_taules_b = mean(taules)) %>%
arrange(codi_barri)
rev
#
# data_idealista = left_join(data_idealista,n_terrazas_b,by=c("id_barri" = "codi_barri"))
# data_idealista = left_join(data_idealista,n_terrazas_d,by=c("distrito2" = "nom_districte"))
#
data_idealista = left_join(data_idealista,rev,by=c("id_barri" = "codi_barri"))
summary(data_idealista)
colnames(arbres_bcn)
data_idealista = groupingDataOpenData(data_idealista,arbres_bcn,"arbres_bcn")
summary(data_idealista)
data_idealista = groupingDataOpenData(data_idealista,arbres_viaris,"arbres_viaris")
summary(data_idealista)
unique(bar_copas$secondary_filters_name)
bar_copas %>%
group_by(secondary_filters_name)%>%
count() %>%
arrange(-n)
dim(bar_copas)
length(unique(bar_copas$name))
data_idealista = groupingDataOpenData(data_idealista,bar_copas,"bar_copas")
summary(data_idealista)
# Fill all NA with 0 (know that are from the barris/ districtes aggreggation)
data_idealista <- data_idealista %>% replace(is.na(.), 0)
summary(data_idealista)
path_idealista
date_to_save <- str_extract(path_idealista, "\\d{4}-\\d{2}-\\d{2}")
date_to_save
paste0("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/2_clean/data_modelling",date_to_save,".csv")
path_to_save = paste0("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/2_clean/data_modelling_",date_to_save,".csv")
saveRDS(data_idealista,file=path_to_save)
path_to_save = paste0("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling_",date_to_save,".csv")
saveRDS(data_idealista,file=path_to_save)
path_to_save = paste0("C:/Users/ggari/Desktop/1_projects/TFM/1_data/2_data_Idealista/data_modelling_",date_to_save)
saveRDS(data_idealista,file=path_to_save)
data_date = "2023-04-20"
data_date = "2023-04-20"
path_modelling = paste0("data_modelling_",data_date,".RDS")
path_modelling
data_idealista <- readRDS(here::here('Desktop','1_projects','TFM','1_data','2_data_Idealista','data_modelling.RDS'))
data_idealista <- readRDS(here::here('Desktop','1_projects','TFM','1_data','2_data_Idealista','data_modelling.RDS'))
regressors<-c(
# "barri",
"distrito2",
"terraza",
# "balcon",
"estado" ,
# "armarios",
# "cocina",
"amueblado",
# "planta",
# "calef",
"asc",
"aire",
"exterior",
# "casa",
"estudio",
"wc2",
"rooms2",
# # "terraza_balcon",
# "n_hospitals_barri",
# # "n_hospitals_districte",
# "hospitals",
# "caps",
"cuaps",
"n_terrazas_barri",
# # "n_terrazas_districte",
# # "mean_cadires_b",
"mean_superficie_b",
"mean_taules_b",
# "n_arbres_bcn_barri",
# # "n_arbres_bcn_districte",
"n_arbres_viaris_barri",
# # "n_arbres_viaris_districte",
"n_bar_copas_barri",
# # "n_bar_copas_districte",
"square_mt"
)
lm0 <- lm(reformulate("square_mt","log_price"),
data_idealista)
lm1 <- lm(reformulate("square_mt + rooms2","log_price"),
data_idealista)
lm3 <- lm(reformulate("square_mt + asc","log_price"),
data_idealista)
lm2 <- lm(reformulate(regressors,"log_price"),
data_idealista)
summary(lm0)
summary(lm1)
summary(lm2)
summary(lm3)
vif(lm2)
plot(lm2,ask=F)
# sort(cooks.distance(lm1))
cooksd =  cooks.distance(lm2)
data_idealista$cookd = cooks.distance(lm2)
dim(data_idealista[data_idealista$cookd>0.01,])
plot(cooks.distance(lm2))
abline(h = 4*mean(cooksd, na.rm=T), col="red")
data_cook[data_cook$cookd < 0.005,]
dim(data_idealista[data_idealista$cookd>0.005,])
# data_cook = data_idealista[-test,]
data_idealista[data_idealista$cookd>0.005,]
# data_cook = data_idealista[-test,]
data_idealista[data_idealista$cookd>0.01,]
data_idealista[data_idealista$cookd < 0.01,]
data_cook = data_idealista[data_idealista$cookd < 0.01,]
lm3 <- lm(reformulate("square_mt + asc + amueblado + aire +
estudio + rooms + wc2 + n_arbres_viaris_barri + cuaps
","log_price"),
data_cook)
summary(lm3)
lm3 <- lm(reformulate(regressors,"log_price"),
data_cook)
summary(lm3)
lm3 <- lm(reformulate("square_mt + asc + amueblado + aire +
estudio + rooms + wc2 + n_arbres_viaris_barri + cuaps
","log_price"),
data_cook)
summary(lm3)
# Extraño que con mas habitaciones menos precio, contra intuitivo.
betas <- as.data.frame(dfbetas(lm3))
summary(betas$rooms)
betas %>%filter(rooms == min(rooms))
colnames(betas) <- gsub(pattern = "[()]|[ ]","",colnames(betas))
colnames(betas) <-  paste0(colnames(betas),'_beta')
data_betas <- cbind(data_cook,betas)
data_betas %>%filter(rooms_beta == min(rooms_beta))
data_betas = data_betas %>%filter(!rooms_beta == min(rooms_beta))
lm3 <- lm(reformulate("square_mt + asc + amueblado + aire +
estudio + rooms + wc2 + n_arbres_viaris_barri + cuaps
","log_price"),
data_betas)
data_betas <- data_betas %>% select(- contains("_beta"))
summary(lm3)
data_betas <- data_betas %>% select(- contains("_beta"))
betas <- as.data.frame(dfbetas(lm3))
betas %>%filter(rooms == min(rooms))
colnames(betas) <- gsub(pattern = "[()]|[ ]","",colnames(betas))
colnames(betas) <-  paste0(colnames(betas),'_beta')
data_betas <- cbind(data_betas,betas)
data_betas %>%filter(rooms_beta == min(rooms_beta))
data_betas = data_betas %>%filter(!rooms_beta == min(rooms_beta))
lm3 <- lm(reformulate("square_mt + asc + amueblado + aire +
estudio + rooms + wc2 + n_arbres_viaris_barri + cuaps
","log_price"),
data_betas)
summary(lm3)
data_betas <- data_betas %>% select(- contains("_beta"))
betas <- as.data.frame(dfbetas(lm3))
betas %>%filter(rooms == min(rooms))
colnames(betas) <- gsub(pattern = "[()]|[ ]","",colnames(betas))
colnames(betas) <-  paste0(colnames(betas),'_beta')
data_betas <- cbind(data_betas,betas)
data_betas %>%filter(rooms_beta == min(rooms_beta))
data_betas = data_betas %>%filter(!rooms_beta == min(rooms_beta))
lm3 <- lm(reformulate("square_mt + asc + amueblado + aire +
estudio + rooms + wc2 + n_arbres_viaris_barri + cuaps
","log_price"),
data_betas)
summary(lm3)
vif(lm3)
plot(lm3,ask=F)
coefficients_model <-c("square_mt","asc","amueblado","aire",
"estudio","rooms","wc2")
coefficients_model
coefficients(lm3)["rooms"]
if(coefficients(lm3)["rooms"] <0){
stop("wrong direction coefficient")
}
for(c in coefficients_model){
print(coefficients(lm3)[i])
}
calc_dfbetas <- function(model){
tmp = dfbetas(model)
return(as.data.frame(tmp))
}
format_col_betas <- function(betas){
colnames(betas) <- gsub(pattern = "[()]|[ ]","",colnames(betas))
colnames(betas) <-  paste0(colnames(betas),'_beta')
return(as.data.frame(betas))
}
observation_wrong_sign <- function(df){
print(df %>%filter(rooms_beta == min(rooms_beta)))
}
remove_wrong_obs <- function(df){
df = df %>%filter(!rooms_beta == min(rooms_beta))
return(df)
}
# 1º betas
df = data_cook
df
dim(df)
